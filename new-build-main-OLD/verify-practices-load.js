// verify-practices-load.js - CommonJS style// This script tests if the practices page can fetch practices from the databaseconst { createClient } = require('@supabase/supabase-js');// Supabase client configurationconst supabaseUrl = 'https://svnczxevigicuskppyfz.supabase.co';const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN2bmN6eGV2aWdpY3Vza3BweWZ6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQwNDk1NDAsImV4cCI6MjA1OTYyNTU0MH0.00MNZRYjGKHTEFvF0enW-VCZ4qgDnXC4LeV8XsjGaEU';const supabase = createClient(supabaseUrl, supabaseKey);async function simulatePracticesPageLoad() {  console.log('Simulating practices page load...');    try {    // This is similar to the code in PracticeContext.tsx    console.log('Attempting to fetch practices from Supabase...');        const { data: practicesData, error } = await supabase      .from('practices')      .select('*');        if (error) {      console.error('Error fetching practices from Supabase:', error);      return;    }        if (practicesData && practicesData.length > 0) {      console.log(`Successfully fetched ${practicesData.length} practices from the database`);            // Transform data to match Practice interface      const practices = practicesData.map(p => ({        id: p.id,        icon: p.icon,        name: p.name,        description: p.description,        benefits: p.benefits || [],        duration: p.duration,        points: p.points,        completed: p.completed || false,        streak: p.streak || 0,        tags: p.tags || [],        steps: p.steps || [],        source: p.source,        stepProgress: p.step_progress,        isDaily: p.is_daily === true, // Ensure proper boolean conversion        userCreated: p.user_created === true, // Ensure proper boolean conversion        createdByUserId: p.created_by_user_id,        isSystemPractice: p.is_system_practice === true // Ensure proper boolean conversion      }));            // Count practices by category      const systemPracticeCount = practices.filter(p => p.isSystemPractice === true).length;      const dailyPracticeCount = practices.filter(p => p.isDaily === true).length;            console.log('Practices by category:');      console.log(`- System practices: ${systemPracticeCount}`);      console.log(`- Daily practices: ${dailyPracticeCount}`);            // Log all practice names      console.log('\nAvailable practices in the database:');      practices.forEach((practice, index) => {        console.log(`${index + 1}. ${practice.name} (ID: ${practice.id}, Daily: ${practice.isDaily ? 'Yes' : 'No'}, System: ${practice.isSystemPractice ? 'Yes' : 'No'})`);      });            return practices;    } else {      console.log('No practices found in database or empty response');      return [];    }  } catch (error) {    console.error('Exception fetching practices from Supabase:', error);    return [];  }}// Run the simulationsimulatePracticesPageLoad()  .then(() => console.log('\nVerification complete!'))  .catch(error => console.error('Error running verification:', error));