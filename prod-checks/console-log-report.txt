./src/pages/Settings.tsx:      console.log('No user found in Settings page');
./src/pages/PractitionerDetail.tsx:  console.log('PractitionerDetail rendered with id:', id);
./src/pages/PractitionerDetail.tsx:  console.log('Current URL path:', window.location.pathname);
./src/pages/PractitionerDetail.tsx:  console.log('React Router working:', !!navigate);
./src/pages/PractitionerDetail.tsx:    console.log(`PractitionerDetail component mounted for practitioner ${id}`);
./src/pages/PractitionerDetail.tsx:      console.log(`PractitionerDetail component unmounted for practitioner ${id}`);
./src/pages/PractitionerDetail.tsx:    console.log('PractitionerDetail useEffect triggered with id:', id);
./src/pages/PractitionerDetail.tsx:      console.log('fetchPractitioner called with id:', id);
./src/pages/PractitionerDetail.tsx:        console.log('No ID found, redirecting to therapist-listing');
./src/pages/PractitionerDetail.tsx:      console.log('Creating appointment with data:', JSON.stringify(appointmentData, null, 2));
./src/pages/PractitionerEditProfile.tsx:    console.log("PractitionerEditProfile component mounted");
./src/pages/PractitionerEditProfile.tsx:      console.log("Coming from successful registration");
./src/pages/PractitionerEditProfile.tsx:      console.log("Location state:", locationState);
./src/pages/PractitionerEditProfile.tsx:      console.log("Practitioner ID from localStorage:", practitionerId);
./src/pages/PractitionerEditProfile.tsx:      console.log("PractitionerEditProfile component unmounted");
./src/pages/PractitionerEditProfile.tsx:      console.log("Starting profile update process");
./src/pages/PractitionerEditProfile.tsx:      console.log("Found existing record with ID:", existingRecord?.id);
./src/pages/PractitionerEditProfile.tsx:      console.log("Updating practitioner data:", practitionerData);
./src/pages/PractitionerEditProfile.tsx:        console.log("Newly registered practitioner - doing full reload for data consistency");
./src/pages/PractitionerEditProfile.tsx:        console.log("Update successful - refetching data");
./src/pages/TherapistListing.tsx:    console.log(`Book free session with therapist ID: ${therapistId}`);
./src/pages/TherapistListing.tsx:    console.log("Searching for:", searchTerm);
./src/pages/TherapistListing_New.tsx:      console.log('TherapistListing: Initializing connection to Supabase');
./src/pages/TherapistListing_New.tsx:      console.log('Executing Supabase query for practitioners');
./src/pages/TherapistListing_New.tsx:        console.log(`Successfully fetched ${data.length} practitioners`);
./src/pages/TherapistListing_New.tsx:    console.log(`Navigating to practitioner/${therapistId}`);
./src/pages/Practices.tsx:  console.log(`Found ${practices.length} total practices:`);
./src/pages/Practices.tsx:    console.log(`Initialized with ${practices.length} practices`);
./src/pages/FocusTimerIndex.tsx:console.log('FocusTimer index bridge loaded successfully');
./src/pages/FlashScreen.tsx:    console.log('FlashScreen component mounted');
./src/pages/FlashScreen.tsx:    console.log('frameMask URL:', frameMask);
./src/pages/FlashScreen.tsx:    return () => console.log('FlashScreen component unmounting');
./src/pages/TherapistListing_Mobile.tsx:          console.log('No data returned from database');
./src/pages/TherapyBooking.tsx:    console.log("Searching for:", searchQuery, "in", locationQuery);
./src/pages/ResponsiveHome.tsx:    console.log("ResponsiveHome rendering, isMobile:", isMobile);
./src/pages/PractitionerOnboarding.tsx:  console.log("PractitionerOnboarding component rendering"); // Debug log
./src/pages/PractitionerOnboarding.tsx:    console.log("Cleaned up any stale practitioner navigation flags");
./src/pages/PractitionerOnboarding.tsx:    console.log("PractitionerOnboarding mounted");
./src/pages/PractitionerOnboarding.tsx:      console.log("PractitionerOnboarding unmounted");
./src/pages/PractitionerOnboarding.tsx:    console.log(`Step changed to: ${step}`);
./src/pages/PractitionerOnboarding.tsx:        console.log("Checking if user already has a practitioner record");
./src/pages/PractitionerOnboarding.tsx:          console.log("Existing practitioner record found:", data);
./src/pages/PractitionerOnboarding.tsx:          console.log("No existing practitioner record found. Proceeding with onboarding.");
./src/pages/PractitionerOnboarding.tsx:    console.log("FormData updated:", formData);
./src/pages/PractitionerOnboarding.tsx:    console.log("User data:", user);
./src/pages/PractitionerOnboarding.tsx:      console.log("Already at final step, can't go further");
./src/pages/PractitionerOnboarding.tsx:      console.log("handleSubmit called on step", step);
./src/pages/PractitionerOnboarding.tsx:      console.log("Checking for existing practitioner record...");
./src/pages/PractitionerOnboarding.tsx:        console.log('User already has a practitioner record:', existingData);
./src/pages/PractitionerOnboarding.tsx:      console.log("Prepared practitioner data for submission:", practitionerData);
./src/pages/PractitionerOnboarding.tsx:      console.log("Submitting data to Supabase...");
./src/pages/PractitionerOnboarding.tsx:      console.log("Successfully inserted practitioner data:", insertedData);
./src/pages/PractitionerOnboarding.tsx:  console.log("Rendering PractitionerOnboarding component", { step, formData });
./src/components/appointment/VideoCallSetup.tsx:    console.log('Sending meeting invitations:', {
./src/services/PractitionerService.ts:      console.log('Checking if practitioners table exists...');
./src/services/PractitionerService.ts:        console.log('Practitioners table does not exist. Creating it...');
./src/services/PractitionerService.ts:      console.log('Practitioners table exists');
./src/services/PractitionerService.ts:      console.log('Creating practitioners table structure...');
./src/services/PractitionerService.ts:      console.log('Setting up security policies...');
./src/services/PractitionerService.ts:      console.log('Adding sample practitioner data...');
./src/services/PractitionerService.ts:      console.log('Practitioners table created and seeded successfully');
./src/services/AppointmentBookingService.ts:      console.log(`üé• Creating Zoom meeting for appointment ${appointmentId}`);
./src/services/AppointmentBookingService.ts:      console.log(`üé• Created Google Meet for appointment ${appointmentId}`);
./src/services/AppointmentBookingService.ts:      console.log(`üé• Created Teams meeting for appointment ${appointmentId}`);
./src/services/AppointmentBookingService.ts:      console.log(`No active calendar integration found for practitioner ${bookingData.practitionerId}`);
./src/services/AppointmentBookingService.ts:        console.log(`Unsupported calendar type: ${integration.calendar_type}`);
./src/services/AppointmentBookingService.ts:    console.log(`üìÖ [MOCK] Adding appointment ${appointmentId} to Google Calendar`);
./src/services/AppointmentBookingService.ts:    console.log(`üìÖ [MOCK] Adding appointment ${appointmentId} to Outlook Calendar`);
./src/services/EmailNotificationService.ts:      console.log(`‚úÖ [MOCK EMAIL] Sent to: ${to}`);
./src/services/EmailNotificationService.ts:      console.log(`üìß Subject: ${subject}`);
./src/services/EmailNotificationService.ts:      console.log(`üìù Body preview: ${htmlBody.substring(0, 100)}...`);
./src/services/EmailNotificationService.ts:    console.log(`üìÖ [MOCK] Reminder email scheduled for appointment ${appointmentId}`);
./src/services/EmailNotificationService.ts:      console.log(`üìß Sent ${appointments?.length || 0} reminder emails for tomorrow's appointments`);
