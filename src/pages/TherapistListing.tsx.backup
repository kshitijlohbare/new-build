// This file now re-exports the new TherapistListing_New component
import TherapistListingNew from './TherapistListing_New';

// Export the new component as default
export default TherapistListingNew;

type Therapist = {
  id: string;
  created_at: string;
  name: string;
  specialty: string;
  location: string;
  rating: number;
  image_url: string;
  bio: string;
  years_experience: number;
  credentials?: string;
  session_cost?: number;
  session_type?: "both" | "online" | "in-person";
  reviews_count?: number;
};

// Sample therapist data for initialization
const sampleTherapists = [
  {
    name: 'Dr. Sarah Johnson',
    specialty: 'Cognitive Behavioral Therapy',
    location: 'New York, NY',
    rating: 4.8,
    bio: 'Clinical Psychologist specializing in anxiety and depression treatment with over a decade of experience helping patients develop coping strategies.',
    years_experience: 12,
    credentials: 'PhD in Clinical Psychology, Stanford University',
    session_cost: 120,
    session_type: "both",
    reviews_count: 124
  },
  {
    name: 'Dr. Michael Chen',
    specialty: 'Psychiatry',
    location: 'Los Angeles, CA',
    rating: 4.7,
    bio: 'Psychiatrist focusing on depression and bipolar disorders using evidence-based approaches and compassionate care.',
    years_experience: 15,
    credentials: 'MD in Psychiatry, Johns Hopkins University',
    session_cost: 150,
    session_type: "online",
    reviews_count: 98
  },
  {
    name: 'Emily Rodriguez, LCSW',
    specialty: 'Family Therapy',
    location: 'Chicago, IL',
    rating: 4.5,
    bio: 'Licensed Clinical Social Worker dedicated to helping individuals and families navigate challenging situations.',
    years_experience: 8,
    credentials: 'MSW, Columbia University',
    session_cost: 90,
    session_type: "online",
    reviews_count: 76
  }
];

export default function TherapistListing() {
  const [therapists, setTherapists] = useState<Therapist[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [locationTerm, setLocationTerm] = useState('');
  const [selectedSpecialty, setSelectedSpecialty] = useState<string>('');
  const [, setSpecialties] = useState<string[]>([]);
  const [activeFilter, setActiveFilter] = useState('recommended');
  // Status variable for database operations - needed for setup process
  const [, setTableCreationStatus] = useState('');

  // Pre-defined specialty tags for the UI
  const specialtyTags = [
    "depression", "adhd", "ocd", "anxiety", "postpartum depression", "bi-polar disorder"
  ];

  useEffect(() => {
    // First check if therapists table exists and create it if needed
    checkAndCreateTherapistsTable();
  }, []);

  const checkAndCreateTherapistsTable = async () => {
    try {
      // Try to fetch from therapists table to check if it exists
      setLoading(true);
      setTableCreationStatus('Checking therapists table...');
      
      const { error } = await supabase
        .from('therapists')
        .select('count(*)')
        .limit(1);
      
      // If there's a 404 error, the table doesn't exist
      if (error && (error.code === '42P01' || error.message.includes('relation "therapists" does not exist'))) {
        setTableCreationStatus('Creating therapists table...');
        await createTherapistsTable();
      } else if (error) {
        console.error('Error checking therapists table:', error);
        setTableCreationStatus('Error checking therapists table');
      } else {
        // Table exists, proceed to fetch data
        setTableCreationStatus('Therapists table exists');
        fetchTherapists();
        extractSpecialties();
      }
    } catch (error) {
      console.error('Error in check and create flow:', error);
      setTableCreationStatus('Error in setup process');
      setLoading(false);
    }
  };

  const createTherapistsTable = async () => {
    try {
      // Create the therapists table
      setTableCreationStatus('Creating therapists table structure...');
      
      const createTableQuery = `
        CREATE TABLE IF NOT EXISTS public.therapists (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
          name TEXT NOT NULL,
          specialty TEXT NOT NULL,
          location TEXT NOT NULL,
          rating DECIMAL(3,1) NOT NULL CHECK (rating >= 0 AND rating <= 5),
          image_url TEXT,
          bio TEXT NOT NULL,
          years_experience INTEGER NOT NULL
        );
      `;
      
      // Execute the create table query
      const { error: createError } = await supabase.rpc('pg_execute', {
        query: createTableQuery
      });
      
      if (createError) {
        console.error('Error creating therapists table:', createError);
        setTableCreationStatus('Failed to create therapists table');
        setLoading(false);
        return;
      }
      
      // Set up RLS policies
      setTableCreationStatus('Setting up security policies...');
      
      const rlsQueries = [
        `ALTER TABLE public.therapists ENABLE ROW LEVEL SECURITY;`,
        `CREATE POLICY IF NOT EXISTS "Allow public read access to therapists" 
         ON public.therapists FOR SELECT USING (true);`,
        `CREATE POLICY IF NOT EXISTS "Allow authenticated users to insert therapists" 
         ON public.therapists FOR INSERT WITH CHECK (auth.role() = 'authenticated');`,
        `CREATE POLICY IF NOT EXISTS "Allow authenticated users to update therapists" 
         ON public.therapists FOR UPDATE USING (auth.role() = 'authenticated');`
      ];
      
      // Execute each RLS query
      for (const query of rlsQueries) {
        const { error } = await supabase.rpc('pg_execute', { query });
        if (error) {
          console.error('Error setting up RLS:', error);
        }
      }
      
      // Insert sample data
      setTableCreationStatus('Adding sample therapist data...');
      const { error: insertError } = await supabase
        .from('therapists')
        .insert(sampleTherapists);
      
      if (insertError) {
        console.error('Error inserting sample data:', insertError);
        setTableCreationStatus('Error adding sample data');
      } else {
        setTableCreationStatus('Setup complete - Fetching therapists...');
        // Now fetch the data
        await fetchTherapists();
        await extractSpecialties();
      }
      
    } catch (error) {
      console.error('Error in create therapists table process:', error);
      setTableCreationStatus('Failed to set up therapists data');
      setLoading(false);
    }
  };

  const fetchTherapists = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('therapists')
        .select('*');
      
      if (error) throw error;
      
      if (data) {
        setTherapists(data);
      }
    } catch (error) {
      console.error('Error fetching therapists:', error);
    } finally {
      setLoading(false);
    }
  };
  
  const extractSpecialties = async () => {
    try {
      const { data, error } = await supabase
        .from('therapists')
        .select('specialty');
      
      if (error) throw error;
      
      if (data) {
        const uniqueSpecialties = [...new Set(data.map(item => item.specialty))];
        setSpecialties(uniqueSpecialties);
      }
    } catch (error) {
      console.error('Error extracting specialties:', error);
    }
  };

  const filteredTherapists = therapists.filter(therapist => {
    const matchesSearch = 
      therapist.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
      therapist.specialty.toLowerCase().includes(searchTerm.toLowerCase()) ||
      therapist.bio.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesLocation = !locationTerm || 
      therapist.location.toLowerCase().includes(locationTerm.toLowerCase());
    
    const matchesSpecialty = !selectedSpecialty || 
      therapist.specialty.toLowerCase().includes(selectedSpecialty.toLowerCase());
    
    return matchesSearch && matchesLocation && matchesSpecialty;
  });

  const handleBookAppointment = (therapistId: string) => {
    console.log(`Book free session with therapist ID: ${therapistId}`);
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    console.log("Searching for:", searchTerm);
    // The filtering is already happening reactively
  };

  const handleSpecialtySelect = (specialty: string) => {
    setSelectedSpecialty(prev => prev === specialty ? '' : specialty);
  };

  return (
    <div className="min-h-screen bg-[#F9FCFD] font-happy-monkey">
      {/* Hero Section with search */}
      <div className="w-full bg-[rgba(6,196,213,0.10)] px-4 py-10">
        <div className="max-w-6xl mx-auto text-center">
          <h1 className="text-[#06C4D5] text-3xl sm:text-4xl lowercase mb-4">
            find the perfect therapist for you
          </h1>
          
          <p className="text-gray-600 max-w-2xl mx-auto mb-8">
            Our specialized therapists are ready to support your unique journey. Get your first session free.
          </p>
          
          <div className="flex flex-col gap-4 md:flex-row justify-center mb-8">
            <div className="bg-white p-3 rounded-lg text-left shadow-sm">
              <div className="flex items-center text-[#06C4D5]">
                <div className="h-5 w-5 mr-2">◯</div>
                <span className="text-sm">Personalized matching</span>
              </div>
            </div>
            <div className="bg-white p-3 rounded-lg text-left shadow-sm">
              <div className="flex items-center text-[#06C4D5]">
                <div className="h-5 w-5 mr-2">◯</div>
                <span className="text-sm">Online & in-person options</span>
              </div>
            </div>
            <div className="bg-white p-3 rounded-lg text-left shadow-sm">
              <div className="flex items-center text-[#06C4D5]">
                <div className="h-5 w-5 mr-2">◯</div>
                <span className="text-sm">First session free</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Search Section */}
      <div className="max-w-6xl mx-auto px-4 -mt-6">
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-happy-monkey mb-6 text-center text-gray-800">
            find your perfect therapist
          </h2>
          
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1">
              <form onSubmit={handleSearch} className="flex">
                <div className="relative flex-1">
                  <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 h-4 w-4" />
                  <Input
                    type="text"
                    placeholder="Try 'Anger Management'"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10 border-gray-200 rounded-l-lg"
                  />
                </div>
                <div className="relative">
                  <MapPin className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 h-4 w-4" />
                  <Input
                    type="text"
                    placeholder="Where do you want the therapist"
                    value={locationTerm}
                    onChange={(e) => setLocationTerm(e.target.value)}
                    className="pl-10 border-gray-200 rounded-r-lg"
                  />
                </div>
                <Button 
                  type="submit"
                  className="ml-2 bg-[#06C4D5] hover:bg-[#05b0c0] rounded-lg"
                >
                  search
                </Button>
              </form>
            </div>
          </div>
          
          {/* Specialty Tags */}
          <div className="flex flex-wrap gap-2 mt-4">
            {specialtyTags.map((tag, index) => (
              <button
                key={index}
                onClick={() => handleSpecialtySelect(tag)}
                className={`rounded-full px-4 py-1.5 text-sm ${
                  selectedSpecialty === tag
                    ? "bg-[#06C4D5] text-white"
                    : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                } transition-colors`}
              >
                {tag}
              </button>
            ))}
          </div>
        </div>
      </div>
      
      {/* Filter Bar */}
      <div className="max-w-6xl mx-auto px-4 mt-6 mb-4">
        <div className="flex flex-wrap gap-3 border-b pb-2">
          <button 
            onClick={() => setActiveFilter('recommended')}
            className={`px-3 py-1.5 ${activeFilter === 'recommended' ? 'text-[#06C4D5] border-b-2 border-[#06C4D5]' : 'text-gray-600'}`}
          >
            recommended
          </button>
          <button 
            onClick={() => setActiveFilter('online')}
            className={`px-3 py-1.5 ${activeFilter === 'online' ? 'text-[#06C4D5] border-b-2 border-[#06C4D5]' : 'text-gray-600'}`}
          >
            online
          </button>
          <button 
            onClick={() => setActiveFilter('face-to-face')}
            className={`px-3 py-1.5 ${activeFilter === 'face-to-face' ? 'text-[#06C4D5] border-b-2 border-[#06C4D5]' : 'text-gray-600'}`}
          >
            face-to-face
          </button>
          
          <div className="ml-auto flex items-center gap-2">
            <select className="appearance-none bg-white border border-gray-200 rounded p-1.5 pl-3 pr-8 text-sm relative">
              <option value="recommended">recommended</option>
              <option value="price-low">Price: Low to High</option>
              <option value="price-high">Price: High to Low</option>
              <option value="rating">Highest Rated</option>
            </select>
            <ChevronDown className="w-4 h-4 text-gray-500 -ml-7 pointer-events-none" />
            
            <button className="flex items-center gap-1 border border-gray-200 rounded p-1.5 text-sm">
              <Filter className="w-4 h-4" />
              filter
            </button>
          </div>
        </div>
      </div>
      
      {/* Therapist Listings */}
      <div className="max-w-6xl mx-auto px-4 grid grid-cols-1 md:grid-cols-2 gap-6">
        {loading ? (
          <div className="col-span-full flex justify-center items-center py-20">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#06C4D5]"></div>
          </div>
        ) : filteredTherapists.length > 0 ? (
          filteredTherapists.map((therapist, index) => (
            <div 
              key={therapist.id || index} 
              className="bg-white rounded-lg shadow-sm overflow-hidden border border-gray-100 animate-[fadeIn_0.5s_ease-out]"
              style={{ animationDelay: `${index * 100}ms` }}
            >
              <div className="flex">
                {/* Therapist Image */}
                <div className="w-1/3">
                  <div className="relative h-full">
                    {index === 0 && (
                      <div className="absolute top-2 left-2 bg-blue-100 text-blue-600 text-xs px-2 py-0.5 rounded-sm">
                        confident
                      </div>
                    )}
                    {index === 1 && (
                      <div className="absolute top-2 left-2 bg-green-100 text-green-600 text-xs px-2 py-0.5 rounded-sm">
                        experienced
                      </div>
                    )}
                    <img 
                      src={therapist.image_url || `https://randomuser.me/api/portraits/${index % 2 === 0 ? 'women' : 'men'}/${index + 1}.jpg`} 
                      alt={therapist.name} 
                      className="w-full h-full object-cover"
                    />
                  </div>
                </div>
                
                {/* Therapist Info */}
                <div className="w-2/3 p-4">
                  <div className="flex justify-between">
                    <h3 className="text-[#06C4D5] font-happy-monkey text-lg">{therapist.name}</h3>
                    <div className="text-[#06C4D5] font-medium">
                      ${therapist.session_cost || 120}<span className="text-xs text-gray-500">/session</span>
                    </div>
                  </div>
                  
                  <p className="text-sm text-gray-600 mt-1">
                    {therapist.specialty || "Clinical Psychologist specializing in anxiety"}
                  </p>
                  
                  {/* Tags */}
                  <div className="flex gap-1 mt-2 flex-wrap">
                    {['anxiety', 'depression'].map((tag, i) => (
                      <span key={i} className="bg-gray-100 text-gray-600 text-xs px-2 py-0.5 rounded-sm">
                        {tag}
                      </span>
                    ))}
                    {index === 0 && <span className="text-xs text-[#06C4D5]">+2 more</span>}
                    {index === 1 && <span className="text-xs text-[#06C4D5]">+2 more</span>}
                  </div>
                  
                  {/* Credentials */}
                  <div className="text-xs text-gray-500 mt-2">
                    {therapist.credentials || "PhD in Clinical Psychology, Stanford University"}
                  </div>
                  
                  {/* Rating and Reviews */}
                  <div className="flex items-center mt-2">
                    {[...Array(5)].map((_, i) => (
                      <Star 
                        key={i} 
                        className={`w-3.5 h-3.5 ${
                          i < Math.floor(therapist.rating) 
                            ? "text-yellow-400 fill-yellow-400" 
                            : "text-gray-300"
                        }`}
                      />
                    ))}
                    <span className="text-xs text-gray-500 ml-1">
                      {therapist.rating.toFixed(1)} ({therapist.reviews_count || 100}+ reviews)
                    </span>
                  </div>
                  
                  {/* Session Type */}
                  <div className="mt-3 mb-2">
                    <span className={`text-xs px-2 py-1 rounded-sm ${
                      therapist.session_type === 'both' 
                        ? 'bg-purple-50 text-purple-600' 
                        : therapist.session_type === 'online'
                          ? 'bg-blue-50 text-blue-600'
                          : 'bg-green-50 text-green-600'
                    }`}>
                      {therapist.session_type || 'both'}
                    </span>
                  </div>
                  
                  {/* Book Button */}
                  <button
                    onClick={() => handleBookAppointment(therapist.id || index.toString())}
                    className={`w-full mt-2 py-1.5 rounded text-center text-white text-sm ${
                      index % 2 === 0 
                        ? 'bg-[#30BFDD] hover:bg-[#27a9c6]' 
                        : 'bg-[#06C4D5] hover:bg-[#05b0c0]'
                    }`}
                  >
                    book free session
                  </button>
                </div>
              </div>
            </div>
          ))
        ) : (
          <div className="col-span-full flex flex-col items-center justify-center py-16 px-4">
            <div className="w-20 h-20 bg-[rgba(6,196,213,0.10)] rounded-full flex items-center justify-center mb-4">
              <Search className="w-10 h-10 text-[#06C4D5]" />
            </div>
            <h3 className="text-xl font-happy-monkey text-gray-800 mb-2 lowercase">No therapists found</h3>
            <p className="text-gray-500 text-center mb-6 max-w-md">
              We couldn't find therapists matching your criteria. Try adjusting your filters for more results.
            </p>
            <button
              onClick={() => {
                setSearchTerm('');
                setLocationTerm('');
                setSelectedSpecialty('');
                setActiveFilter('recommended');
              }}
              className="bg-[#06C4D5] text-white font-happy-monkey rounded px-6 py-2 hover:bg-[#05b0c0]"
            >
              Clear All Filters
            </button>
          </div>
        )}
      </div>
      
      <style dangerouslySetInnerHTML={{ __html: animationStyles }} />
    </div>
  );
}