import { useState, useEffect } from "react";
import { Plus, Search } from 'lucide-react';
import { useToast } from '@/hooks/useToast';
import { useAuth } from "@/context/AuthContext";
import { 
  FitnessGroup, 
  getFitnessGroups, 
  getUserGroups, 
  joinFitnessGroup, 
  leaveFitnessGroup,
  createFitnessGroup
} from "@/helpers/fitnessGroupUtils";
import FitnessGroupCard from "@/components/fitness/FitnessGroupCard";
import "@/styles/FitnessGroups.css";
import { FitnessGroup } from '@/helpers/fitnessGroupUtils';

const TABS = [
  { key: 'feels', label: 'share your feels', icon: NewsFeedIcon },
  { key: 'tribe', label: 'find your tribe', icon: CommunityIcon },
  { key: 'events', label: 'friendly events', icon: EventsIcon }
];

// Dummy data for demonstration (replace with real data source)
const GROUPS: FitnessGroup[] = [
  {
    id: 1,
    name: 'Morning Running Group',
    category: 'Running',
    description: 'Start your day right with our energetic morning running group. All paces welcome. Every Sunday morning the run starts.',
    memberCount: 88,
    location: 'Kalyani Nagar',
    creator_id: 'demo',
    created_at: '',
  },
  {
    id: 2,
    name: 'Yoga Tribe',
    category: 'Yoga',
    description: 'Find your zen and flexibility with our yoga tribe. Classes every Saturday.',
    memberCount: 54,
    location: 'Koregaon Park',
    creator_id: 'demo',
    created_at: '',
  },
  {
    id: 3,
    name: 'Cycling Enthusiasts',
    category: 'Cycling',
    description: 'Join our cycling group for weekend rides and fitness challenges.',
    memberCount: 120,
    location: 'Viman Nagar',
    creator_id: 'demo',
    created_at: '',
  },
];

// Sample event data for demonstration
const EVENTS: Event[] = [
  {
    id: 1,
    title: 'Morning Run at Kalyani Nagar',
    date: '12 Jan 2025',
    time: '7:00 AM',
    location: 'Kalyani Nagar Park Entrance',
    description: 'Join us for an energetic morning run. All paces welcome! We\'ll meet by the park entrance near the big map sign.',
    organizer: 'Morning Running Group',
    attendees: 15,
    groupName: 'Morning Running Group',
  },
  {
    id: 2,
    title: 'Weekend Yoga Session',
    date: '14 Jan 2025',
    time: '8:30 AM',
    location: 'Koregaon Park Lawn',
    description: 'Relax and rejuvenate with our weekend yoga session. Suitable for all skill levels. Please bring your own mat.',
    organizer: 'Yoga Tribe',
    attendees: 25,
    groupName: 'Yoga Tribe',
  },
  {
    id: 3,
    title: 'Cycling Expedition',
    date: '15 Jan 2025',
    time: '6:30 AM',
    location: 'Viman Nagar Meeting Point',
    description: 'A 20km cycling expedition around the city outskirts. Helmet required. Water will be provided at checkpoints.',
    organizer: 'Cycling Enthusiasts',
    attendees: 12,
    groupName: 'Cycling Enthusiasts',
  },
  {
    id: 4,
    title: 'Fitness Challenge Day',
    date: '18 Jan 2025',
    time: '9:00 AM',
    location: 'Aundh Sports Complex',
    description: 'Test your limits with various fitness challenges and compete for fun prizes. Activities include sprints, push-ups, and endurance tests.',
    organizer: 'Morning Running Group',
    attendees: 30,
    groupName: 'Morning Running Group',
  }
];

export default function FitnessGroups() {
  const [activeTab, setActiveTab] = useState('feels');
  const [joinedGroups, setJoinedGroups] = useState<string[]>([]);
  const [selectedGroup, setSelectedGroup] = useState<FitnessGroup | null>(null);
  const [searchText, setSearchText] = useState('');
  // Using _searchType for potential future functionality
  const [_searchType, setSearchType] = useState<'groups' | 'events'>('groups');
  // Using only the state value of showInputBar
  const [showInputBar] = useState(true);
  const [postContent, setPostContent] = useState('');
  const [selectedTribe, setSelectedTribe] = useState<string>('all');
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [joinedEvents, setJoinedEvents] = useState<number[]>([]);
  const swipeRef = useRef<HTMLDivElement>(null);
  let touchStartX = 0;

  // Swipe handler for mobile
  const handleTouchStart = (e: React.TouchEvent) => {
    touchStartX = e.touches[0].clientX;
  };
  const handleTouchEnd = (e: React.TouchEvent) => {
    const dx = e.changedTouches[0].clientX - touchStartX;
    if (Math.abs(dx) > 50) {
      const idx = TABS.findIndex(t => t.key === activeTab);
      if (dx < 0 && idx < TABS.length - 1) setActiveTab(TABS[idx + 1].key);
      if (dx > 0 && idx > 0) setActiveTab(TABS[idx - 1].key);
    }
  };

  const handleJoin = (group: FitnessGroup) => {
    setJoinedGroups(prev => [...prev, group.name]);
  };
  
  const handleLeave = (group: FitnessGroup) => {
    setJoinedGroups(prev => prev.filter(name => name !== group.name));
  };
  
  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchText(e.target.value);
  };
  
  const handleGroupSelect = (group: FitnessGroup) => {
    setSelectedGroup(group);
    // Scroll to top when selecting a group
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  };
  
  const handleBackToGroups = () => {
    setSelectedGroup(null);
    // Scroll to top when returning to groups list
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  };

  // Handler for event selection
  const handleEventSelect = (event: Event) => {
    setSelectedEvent(event);
    // Scroll to top when selecting an event
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  };
  
  const handleBackToEvents = () => {
    setSelectedEvent(null);
    // Scroll to top when returning to events list
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  };

  const handleJoinEvent = (event: Event) => {
    setJoinedEvents(prev => [...prev, event.id]);
  };
  
  const handleLeaveEvent = (event: Event) => {
    setJoinedEvents(prev => prev.filter(id => id !== event.id));
  };

  // Filter groups based on search text
  const filteredGroups = useMemo(() => {
    if (!searchText) return GROUPS;
    
    return GROUPS.filter(group => 
      group.name.toLowerCase().includes(searchText.toLowerCase()) || 
      group.description.toLowerCase().includes(searchText.toLowerCase()) ||
      group.category.toLowerCase().includes(searchText.toLowerCase())
    );
  }, [GROUPS, searchText]);

  // Filter events based on search text
  const filteredEvents = useMemo(() => {
    if (!searchText) return EVENTS;
    
    return EVENTS.filter(event => 
      event.title.toLowerCase().includes(searchText.toLowerCase()) || 
      event.description.toLowerCase().includes(searchText.toLowerCase()) ||
      event.location.toLowerCase().includes(searchText.toLowerCase()) ||
      event.groupName.toLowerCase().includes(searchText.toLowerCase())
    );
  }, [searchText]);

  // Update search type based on active tab
  useEffect(() => {
    setSearchType(activeTab === 'events' ? 'events' : 'groups');
  }, [activeTab]);

  // --- Section Renderers ---
  const renderEvents = () => (
    <div className="events-section">
      {selectedEvent ? (
        <EventDetail
          event={selectedEvent}
          isJoined={joinedEvents.includes(selectedEvent.id)}
          onJoin={handleJoinEvent}
          onLeave={handleLeaveEvent}
          onBack={handleBackToEvents}
        />
      ) : (
        filteredEvents.map(event => (
          <div 
            className="event-card" 
            key={event.id} 
            onClick={() => handleEventSelect(event)}
            style={{
              alignSelf: 'stretch',
              padding: '10px',
              background: '#FAF8EC',
              boxShadow: '1px 2px 4px rgba(73, 217.90, 234, 0.50)',
              overflow: 'hidden',
              borderRadius: '8px',
              flexDirection: 'column',
              justifyContent: 'center',
              alignItems: 'center',
              gap: '10px',
              display: 'inline-flex'
            }}
            name={`event-card-${event.id}`}
            data-testid={`event-card-${event.id}`}
            aria-label={`Event: ${event.title}`}>
          <div className="event-header" style={{
            alignSelf: 'stretch',
            justifyContent: 'center',
            alignItems: 'flex-start',
            gap: '10px',
            display: 'inline-flex'
          }}>
            <div className="event-category" style={{
              width: '76px',
              alignSelf: 'stretch',
              paddingLeft: '8px',
              paddingRight: '8px',
              paddingTop: '4px',
              paddingBottom: '4px',
              background: '#FAF8EC',
              overflow: 'hidden',
              borderRadius: '8px',
              flexDirection: 'column',
              justifyContent: 'center',
              alignItems: 'center',
              gap: '4px',
              display: 'inline-flex'
            }}>
              <svg width="2" height="2" viewBox="0 0 2 2" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M0.699442 1.62412L1.66507 1.19267C1.89075 1.09196 1.99168 0.827603 1.8912 0.601929C1.79073 0.37625 1.52614 0.275314 1.30046 0.37579L0.334836 0.807236C0.109157 0.907947 0.00822463 1.1723 0.108701 1.39798C0.208721 1.62251 0.472391 1.72551 0.699442 1.62412Z" fill="var(--Primary, #148BAF)"/>
              </svg>
            </div>
            <div className="event-content" style={{
              flex: '1 1 0',
              flexDirection: 'column',
              justifyContent: 'flex-start',
              alignItems: 'center',
              gap: '10px',
              display: 'inline-flex'
            }}>
              <div className="event-title-container" style={{
                alignSelf: 'stretch',
                justifyContent: 'flex-start',
                alignItems: 'center',
                gap: '10px',
                display: 'inline-flex'
              }}>
                <div className="event-title" style={{
                  flex: '1 1 0',
                  justifyContent: 'center',
                  display: 'flex',
                  flexDirection: 'column',
                  color: 'var(--Primary, #148BAF)',
                  fontSize: '16px',
                  fontFamily: 'Righteous',
                  fontWeight: '400',
                  textTransform: 'uppercase',
                  lineHeight: '18px',
                  wordWrap: 'break-word'
                }}>morning running group</div>
              </div>
              <div className="event-description" style={{
                alignSelf: 'stretch',
                justifyContent: 'center',
                display: 'flex',
                flexDirection: 'column',
                color: 'var(--DARKBGColor, black)',
                fontSize: '12px',
                fontFamily: 'Happy Monkey',
                fontWeight: '400',
                textTransform: 'lowercase',
                lineHeight: '16px',
                wordWrap: 'break-word'
              }}>Start your day right with our energetic morning running group. All paces welcome! every sunday morning the run starts</div>
            </div>
          </div>
          <div className="event-meta-row" style={{
            alignSelf: 'stretch',
            justifyContent: 'flex-start',
            alignItems: 'flex-start',
            gap: '10px',
            display: 'inline-flex'
          }}>
            <div className="event-meta event-meta-location" style={{
              flex: '1 1 0',
              height: '24px',
              paddingLeft: '8px',
              paddingRight: '8px',
              paddingTop: '4px',
              paddingBottom: '4px',
              background: 'var(--BGColor, white)',
              overflow: 'hidden',
              borderRadius: '8px',
              justifyContent: 'center',
              alignItems: 'center',
              gap: '4px',
              display: 'flex'
            }}>
              <svg width="13" height="16" viewBox="0 0 13 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M6.68269 1.0878C10.3896 1.0878 11.7105 3.49291 11.7105 5.74349C11.7105 5.7858 11.7092 5.82797 11.7079 5.87029L11.7073 5.88589C11.7067 5.91049 11.7067 5.93509 11.7079 5.95969C11.7085 5.97459 11.7094 5.98921 11.7105 6.00538C11.7266 7.50012 10.9665 9.54931 9.62278 11.6324C8.4807 13.4024 7.48282 14.8316 6.87777 14.8417C6.2775 14.8518 5.25857 13.4776 4.12232 11.7855C3.31536 10.5838 1.96265 8.23465 1.95611 5.98465C1.95698 5.96764 1.958 5.95077 1.95858 5.93376C1.95916 5.91394 1.9593 5.89411 1.95872 5.8743L1.958 5.84436C1.95727 5.81076 1.95611 5.7773 1.95611 5.74384C1.95611 4.34386 2.41667 1.08779 6.68277 1.08779M6.68277 0C2.25543 0 0.833496 3.04882 0.833496 5.74359C0.833496 5.79546 0.835237 5.84762 0.836542 5.89991C0.835817 5.92283 0.833496 5.94518 0.833496 5.96851C0.833496 10.536 5.65819 16 6.89184 16C8.12575 16 12.8978 10.1438 12.8328 5.96851C12.8324 5.95094 12.8304 5.93393 12.8296 5.91636C12.8314 5.85886 12.8333 5.80123 12.8333 5.74373C12.8331 2.97817 11.1095 0.000140027 6.68283 0.000140027L6.68277 0Z" fill="var(--Primary, #148BAF)"/>
              </svg>
              <div className="location-text" style={{
                textAlign: 'center',
                justifyContent: 'center',
                display: 'flex',
                flexDirection: 'column',
                color: 'var(--Primary, #148BAF)',
                fontSize: '12px',
                fontFamily: 'Happy Monkey',
                fontWeight: '400',
                textTransform: 'lowercase',
                lineHeight: '16px',
                wordWrap: 'break-word'
              }}>kalyani nagar</div>
            </div>
            <div className="event-meta event-meta-date" style={{
              flex: '1 1 0',
              height: '24px',
              paddingLeft: '8px',
              paddingRight: '8px',
              paddingTop: '4px',
              paddingBottom: '4px',
              background: 'var(--BGColor, white)',
              overflow: 'hidden',
              borderRadius: '8px',
              justifyContent: 'center',
              alignItems: 'center',
              gap: '4px',
              display: 'flex'
            }}>
              <svg width="17" height="16" viewBox="0 0 17 16" fill="none" xmlns="http://www.w3.org/2000/svg">
              </svg>
              <div className="date-text" style={{
                textAlign: 'center',
                justifyContent: 'center',
                display: 'flex',
                flexDirection: 'column',
                color: 'var(--Primary, #148BAF)',
                fontSize: '12px',
                fontFamily: 'Happy Monkey',
                fontWeight: '400',
                textTransform: 'lowercase',
                lineHeight: '16px',
                wordWrap: 'break-word'
              }}>12 Jan 2025</div>
            </div>
            <div className="event-meta event-meta-members" style={{
              flex: '1 1 0',
              height: '24px',
              paddingLeft: '8px',
              paddingRight: '8px',
              paddingTop: '4px',
              paddingBottom: '4px',
              background: 'var(--BGColor, white)',
              overflow: 'hidden',
              borderRadius: '8px',
              justifyContent: 'center',
              alignItems: 'center',
              gap: '4px',
              display: 'flex'
            }}>
              <div className="member-icon">
                <svg width="15" height="16" viewBox="0 0 15 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path fill-rule="evenodd" clip-rule="evenodd" d="M7.66707 15.9999C11.6368 15.9999 14.8539 14.462 14.8539 12.5637C14.8539 11.1658 13.1082 9.11474 10.6028 8.12992C9.81925 9.09867 8.79245 9.78369 7.66704 9.78369C6.54185 9.78369 5.51493 9.09867 4.73079 8.12992C2.226 9.1148 0.47998 11.1659 0.47998 12.5637C0.47998 14.4618 3.69738 15.9999 7.66713 15.9999H7.66707ZM1.52507 11.7884C1.69354 11.4525 1.95057 11.0934 2.26815 10.75C2.87006 10.0991 3.65334 9.53226 4.51306 9.12017C4.87059 9.48662 5.25279 9.79067 5.65437 10.0276C6.30367 10.4108 6.98078 10.605 7.66704 10.605C8.77943 10.605 9.88143 10.0822 10.8205 9.12004C11.6803 9.53216 12.4639 10.0991 13.0658 10.75C13.3832 11.0934 13.6401 11.4524 13.8087 11.7884C13.9943 12.1585 14.0334 12.4143 14.0334 12.5637C14.0334 12.8211 13.9128 13.0878 13.6749 13.3567C13.3903 13.6784 12.9479 13.9882 12.3955 14.2522C11.7963 14.5386 11.0921 14.7649 10.3024 14.9245C9.46969 15.0929 8.58307 15.1782 7.66708 15.1782C6.75118 15.1782 5.86456 15.0929 5.0318 14.9245C4.24194 14.7649 3.53768 14.5386 2.9385 14.2522C2.38607 13.9881 1.94359 13.6784 1.65888 13.3567C1.42106 13.0878 1.30049 12.821 1.30049 12.5637C1.30049 12.4143 1.33944 12.1585 1.52515 11.7884H1.52507ZM7.66675 8.65024C9.8041 8.65024 11.5368 5.80095 11.5368 3.73728C11.5368 1.67339 9.8041 0 7.66675 0C5.52953 0 3.79672 1.67301 3.79672 3.73728C3.79672 5.80155 5.52941 8.65024 7.66675 8.65024ZM4.61465 3.73728C4.61465 2.96442 4.92801 2.23621 5.49705 1.68667C6.07488 1.12868 6.84539 0.821262 7.66675 0.821262C8.48811 0.821262 9.25875 1.12867 9.83659 1.68679C10.4056 2.23649 10.7191 2.96467 10.7191 3.73728C10.7191 4.15077 10.63 4.62279 10.4616 5.10215C10.2889 5.59354 10.0399 6.07188 9.7413 6.48549C9.43749 6.90641 9.08804 7.25115 8.73063 7.48215C8.37472 7.71227 8.01681 7.82889 7.66674 7.82889C7.31667 7.82889 6.95876 7.71227 6.60297 7.48228C6.24557 7.25117 5.8961 6.90667 5.59231 6.48575C5.29383 6.07216 5.04474 5.59379 4.87204 5.1024C4.70357 4.62304 4.61462 4.1509 4.61462 3.73731L4.61465 3.73728Z" fill="var(--Primary, #148BAF)"/>
                </svg>
              </div>
              <div className="members-text" style={{
                textAlign: 'center',
                justifyContent: 'center',
                display: 'flex',
                flexDirection: 'column',
                color: 'var(--Primary, #148BAF)',
                fontSize: '12px',
                fontFamily: 'Happy Monkey',
                fontWeight: '400',
                textTransform: 'lowercase',
                lineHeight: '16px',
                wordWrap: 'break-word'
              }}>{event.attendees} attendees</div>
            </div>
          </div>
        </div>
        ))
      )}
    </div>
  );

  const renderTribe = () => (
    <div className="tribe-section">
      {selectedGroup ? (
        <FitnessGroupDetail
          group={selectedGroup}
          isJoined={joinedGroups.includes(selectedGroup.name)}
          onJoin={handleJoin}
          onLeave={handleLeave}
          onBack={handleBackToGroups}
        />
      ) : (
        <div className="tribe-content">
          <div className="tribe-cards-container">
            {filteredGroups.map((group) => (
              <FitnessGroupCard
                key={group.id}
                group={group}
                isJoined={joinedGroups.includes(group.name)}
                onJoin={handleJoin}
                onLeave={handleLeave}
                onClick={() => handleGroupSelect(group)}
              />
            ))}
          </div>
        </div>
      )}
    </div>
  );

  const handlePostSubmit = () => {
    if (postContent.trim() === '') {
      return;
    }
    
    // In a real app, this would send the post to your backend
    alert(`Posted to ${selectedTribe === 'all' ? 'all tribes' : selectedTribe}: ${postContent}`);
    setPostContent('');
  };

  const handleTribeSelect = (tribe: string) => {
    setSelectedTribe(tribe);
  };

  const renderFeels = () => (
    <div className="feels-section">
      {/* Tribe filter chips */}
      <div 
        className="tribe-filter-chips-container" 
        id="tribe-filter-chips-container"
        name="tribe-filter-chips-container"
      >
        <button 
          className={`filter-chip ${selectedTribe === 'all' ? 'active' : ''}`}
          onClick={() => handleTribeSelect('all')}
          name="filter-chip-all"
          aria-label="Filter: all tribes"
          aria-pressed={selectedTribe === 'all'}
        >
          <div>all</div>
        </button>
        {GROUPS.map((group) => (
          <button 
            key={group.id}
            className={`filter-chip ${selectedTribe === group.name ? 'active' : ''}`}
            onClick={() => handleTribeSelect(group.name)}
            name={`filter-chip-${group.id}`}
            aria-label={`Filter: ${group.name}`}
            aria-pressed={selectedTribe === group.name}
          >
            <div>{group.name.toLowerCase()}</div>
          </button>
        ))}
      </div>
      <div className="social-feed-container">
        {/* Custom Frame11 implementation */}
        <Frame11 
          username="fitness enthusiast"
          group={selectedTribe !== 'all' ? selectedTribe : "morning running group"}
          content="i've found my wellness tribe and it feels amazing"
          avatarColor="#FCDF4D"
        />
        
        {/* Rest of the social feed */}
        <SocialFeed />
      </div>
    </div>
  );

  // Group details are now rendered directly inside renderTribe

  return (
    <div className="fitnessgroups-root" ref={swipeRef} onTouchStart={handleTouchStart} onTouchEnd={handleTouchEnd}>
      <div className="fitnessgroups-topnav">
        {TABS.map(tab => (
          <div
            key={tab.key}
            className={`fitnessgroups-tab ${activeTab === tab.key ? 'active' : ''}`}
            onClick={() => setActiveTab(tab.key)}
          >
            <img
              src={tab.icon}
              alt={`${tab.label} icon`}
              className="tab-icon"
            />
            {activeTab === tab.key && <span>{tab.label}</span>}
          </div>
        ))}
      </div>
      <div className="fitnessgroups-section">
        {activeTab === 'events' && renderEvents()}
        {activeTab === 'tribe' && renderTribe()}
        {activeTab === 'feels' && renderFeels()}
      </div>
      
      {/* Floating input bar - Search or Post based on active tab */}
      {showInputBar && (
        <div 
          className={`floating-input-bar ${activeTab === 'feels' ? 'post-input-bar' : ''}`}
          id="search-input-container"
          data-testid="search-input-container"
          aria-label={activeTab === 'feels' ? "Post a message" : "Search"}
          name="floating-input-container"
        >
          {activeTab !== 'feels' ? (
            <>
              <div className="search-icon" name="search-icon">
                <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M16.5 16.5L12.875 12.875M14.8333 8.16667C14.8333 11.8486 11.8486 14.8333 8.16667 14.8333C4.48477 14.8333 1.5 11.8486 1.5 8.16667C1.5 4.48477 4.48477 1.5 8.16667 1.5C11.8486 1.5 14.8333 4.48477 14.8333 8.16667Z" stroke="#148BAF" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                </svg>
              </div>
              <input 
                type="text" 
                className="search-input"
                placeholder={activeTab === 'events' ? "search for events..." : "search for fitness groups..."}
                value={searchText}
                onChange={handleSearch}
                name={`search-input-${activeTab}`}
                aria-label={activeTab === 'events' ? "Search events" : "Search fitness groups"}
              />
            </>
          ) : (
            <>
              <input 
                type="text" 
                className="post-input"
                placeholder={`post to ${selectedTribe === 'all' ? 'all tribes' : selectedTribe}...`}
                value={postContent}
                onChange={(e) => setPostContent(e.target.value)}
                name="post-input-feels"
                aria-label={`Post to ${selectedTribe === 'all' ? 'all tribes' : selectedTribe}`}
              />
              <button 
                className="post-button"
                onClick={handlePostSubmit}
                disabled={!postContent.trim()}
                name="post-submit-button"
                aria-label="Submit post"
              >
                post
              </button>
            </>
          )}
        </div>
      )}
    </div>
  );
}
