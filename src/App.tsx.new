// filepath: /Users/kshitijlohbare/Downloads/new build/src/App.tsx
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ThemeProvider } from "./context/ThemeContext";
import { AuthProvider } from "./context/AuthContext";
import { PracticeProvider } from "./context/PracticeContext"; // Import the new provider
import { AchievementProvider } from "./context/AchievementContext"; // Import the achievement provider
import { ProfileProvider } from "./context/ProfileContext"; // Import the profile provider
import { useEffect, useState } from "react";
import { checkUserProfileTables } from "./scripts/profileUtils";
import { ToastProvider, ToastViewport, Toaster } from "./components/ui/toast";
import { ProtectedRoute } from "./components/auth/ProtectedRoute";
import { Login } from "./components/auth/Login";
import { Register } from "./components/auth/Register";
import { AuthCallback } from "./components/auth/AuthCallback";
import { ForgotPassword } from "./components/auth/ForgotPassword"; // Import ForgotPassword
import { ResetPassword } from "./components/auth/ResetPassword"; // Import ResetPassword
import AppLayout from "./components/layout/AppLayout";
import Index from "./pages/Index";
import ResponsiveHome from "./pages/ResponsiveHome"; // Import the new responsive home component
import Practices from "./pages/Practices";
import Progress from "./pages/Progress";
import Meditation from "./pages/Meditation";
import Profile from "./pages/Profile";
import Settings from "./pages/Settings";
import Appointments from "./pages/Appointments";
import TherapistListing from "./pages/TherapistListing_New";
import PractitionerListing from "./pages/PractitionerListing"; // Import our new PractitionerListing page
import TherapyBooking from "./pages/TherapyBooking";
import Booking from "./pages/Booking"; // Import the Booking page
import Community from "./pages/Community"; // Import the Community page for fitness groups
import PractitionerDetail from "./pages/PractitionerDetail"; // Import the new PractitionerDetail page
import TherapistRegistration from "./pages/TherapistRegistration";
import FocusTimer from "./pages/FocusTimer";
import PractitionerOnboarding from "./pages/PractitionerOnboarding"; // Import PractitionerOnboarding
import PractitionerEditProfile from "./pages/PractitionerEditProfile"; // Import PractitionerEditProfile
import Learn from "./pages/Learn"; // Import Learn
import TestPage from "./pages/TestPage"; // Import TestPage for debugging
import LandingPage from "./pages/LandingPage"; // Import the new LandingPage
import SplashScreen from './components/ui/SplashScreen';
import './App.css';
import React from "react"; // Make sure React is imported

// Simple Favicon component directly in App.tsx to avoid import errors
function Favicon() {
  React.useEffect(() => {
    const link = document.querySelector('link[rel="icon"]') as HTMLLinkElement || document.createElement('link');
    link.rel = 'icon';
    link.href = 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text y="0.9em" font-size="90">ðŸŒµ</text></svg>';
    if (!document.querySelector('link[rel="icon"]')) {
      document.head.appendChild(link);
    }
  }, []);
  return null;
}

// Set document title
document.title = "Caktus Coco | Your Wellness Companion";

// Create a new query client with error handling
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 1
    }
  }
});

// ErrorBoundary component to catch rendering errors
class ErrorBoundary extends React.Component<{children: React.ReactNode}, {hasError: boolean, error: any}> {
  constructor(props: {children: React.ReactNode}) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: any) {
    return { hasError: true, error };
  }

  componentDidCatch(error: any, info: any) {
    console.error("App error:", error, info);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex flex-col items-center justify-center p-4 bg-gray-50">
          <h2 className="text-xl text-red-600 font-bold mb-4">Something went wrong</h2>
          <div className="bg-red-50 border border-red-200 p-4 rounded-md max-w-lg mb-4 overflow-auto">
            <pre className="text-xs text-red-700">{String(this.state.error)}</pre>
          </div>
          <button 
            onClick={() => { 
              this.setState({ hasError: false });
              window.location.href = '/';
            }}
            className="px-4 py-2 bg-blue-500 text-white rounded-md"
          >
            Try again
          </button>
        </div>
      );
    }
    return this.props.children;
  }
}

const App = () => {
  // Splash screen state
  const [showSplash, setShowSplash] = useState(true);
  const [initError, setInitError] = useState<string | null>(null);

  // Always call all hooks at the top level, before any conditional return
  useEffect(() => {
    const timer = setTimeout(() => setShowSplash(false), 1500);
    return () => clearTimeout(timer);
  }, []);

  // Initialize necessary tables when app loads
  useEffect(() => {
    const initTables = async () => {
      try {
        // Check user profile tables
        const profileResult = await checkUserProfileTables();
        if (profileResult) {
          console.log("User profile tables verification complete");
        }
      } catch (error) {
        console.error("Error initializing database tables:", error);
        setInitError(String(error));
      }
    };
    initTables();
  }, []);

  // Show initialization error if one occurred
  if (initError) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center p-4 bg-[#F9FCFD]">
        <h2 className="text-xl text-red-600 font-bold mb-4">Initialization Error</h2>
        <div className="bg-red-50 border border-red-200 p-4 rounded-md max-w-lg mb-4">
          <p className="text-sm text-red-700">{initError}</p>
        </div>
        <button 
          onClick={() => window.location.reload()}
          className="px-4 py-2 bg-[#06C4D5] text-white rounded-md"
        >
          Reload Application
        </button>
      </div>
    );
  }

  if (showSplash) {
    return <SplashScreen />;
  }

  return (
    <ErrorBoundary>
      <Favicon />
      <AuthProvider>
        <ThemeProvider>
          <ToastProvider>
            <Toaster />
            <QueryClientProvider client={queryClient}>
              <BrowserRouter>
                <PracticeProvider>
                  <AchievementProvider>
                    <ProfileProvider>
                      <Routes>
                        {/* Landing page for non-logged-in users */}
                        <Route path="/welcome" element={<LandingPage />} />
                        
                        {/* Auth routes */}
                        <Route path="/login" element={<Login />} />
                        <Route path="/register" element={<Register />} />
                        <Route path="/auth/callback" element={<AuthCallback />} />
                        <Route path="/forgot-password" element={<ForgotPassword />} />
                        <Route path="/reset-password" element={<ResetPassword />} />
                        
                        {/* Protected routes */}
                        <Route path="/" element={
                          <ProtectedRoute>
                            <AppLayout />
                          </ProtectedRoute>
                        }>
                          <Route index element={<ResponsiveHome />} />
                          <Route path="dashboard" element={<Navigate to="/" replace />} />
                          <Route path="practices" element={<Practices />} />
                          <Route path="progress" element={<Progress />} />
                          <Route path="meditation" element={<Meditation />} />
                          <Route path="profile" element={<Profile />} />
                          <Route path="settings" element={<Settings />} />
                          <Route path="appointments" element={<Appointments />} />
                          <Route path="therapist-listing" element={<TherapistListing />} />
                          <Route path="practitioner-listing" element={<PractitionerListing />} />
                          <Route path="practitioner/:id" element={<PractitionerDetail />} />
                          <Route path="therapy-booking" element={<TherapyBooking />} />
                          <Route path="therapy-booking/:id" element={<TherapyBooking />} />
                          <Route path="booking" element={<Booking />} />
                          <Route path="therapist-registration" element={<TherapistRegistration />} />
                          <Route path="focus-timer" element={<FocusTimer />} />
                          <Route path="practitioner-onboarding" element={<PractitionerOnboarding />} />
                          <Route path="practitioner-edit-profile" element={<PractitionerEditProfile />} />
                          <Route path="learn" element={<Learn />} />
                          <Route path="fitness-groups" element={<Community />} />
                          <Route path="test" element={<TestPage />} />
                        </Route>
                        
                        {/* Redirect root for non-authenticated users to landing page */}
                        <Route path="*" element={<Navigate to="/welcome" replace />} />
                      </Routes>
                    </ProfileProvider>
                  </AchievementProvider>
                </PracticeProvider>
              </BrowserRouter>
            </QueryClientProvider>
            <ToastViewport />
          </ToastProvider>
          <style>{`
            /* Hide scrollbars for all browsers */
            html, body, * {
              scrollbar-width: none; /* Firefox */
              -ms-overflow-style: none; /* IE and Edge */
            }
            html::-webkit-scrollbar, body::-webkit-scrollbar, *::-webkit-scrollbar {
              display: none; /* Chrome, Safari, Opera */
            }
          `}</style>
        </ThemeProvider>
      </AuthProvider>
    </ErrorBoundary>
  );
};

export default App;
